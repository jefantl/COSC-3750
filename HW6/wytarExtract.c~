#include "wytarUtil.h"


// NOTES:
// have to use chmod to make executables executable when we extract them
// use symlink to create soft links
void extract(char *archivePath) {
  printf("extracting from %s \n",archivePath);

  FILE *fp = fopen(archivePath, "r");
  if (fp == NULL) {
      perror(archivePath);
  } 
  else {
    bool reading = true;
    
    while (reading) {
      struct tar_header header;
      if (fread(&header, 1, BLOCK_SIZE, fp) != BLOCK_SIZE) {
        perror("reading archive");
        return;
      }
      
      // check it is a header by the check-sum
      int givenChksum = octalStringToDecimal(header.chksum);
      int realChksum = 0;
      memset(header.chksum, ' ', 8);
      char *p = (char*)&header;
      for (int i = 0; i < BLOCK_SIZE; i++) {
        realChksum += *p;
        p++;
      }
      if (realChksum == givenChksum) {
        extractObject(fp, header);
      }
    }
  }
}

void extractObject(FILE *archivep, struct tar_header header) {
  if (header.typeflag == REGTYPE) {
    extractFile(archivep, header);
  }
  else if (header.typeflag == SYMTYPE) {
    extractLink(archivep, header);
  }
  else if (header.typeflag == DIRTYPE) {
    extractDirectory(archivep, header);
  }
  else {
    printf("object type not recognized, could not extract");
    return;
  }
}

void extractFile(FILE *archivep, struct tar_header header) {
  // try to create object
  FILE *fp = createFile(header);
  if (fp == NULL) {
    return;
  }
  
  // set permissions
}

void extractLink(FILE *archivep, struct tar_header header) {
}

void extractDirectory(FILE *archivep, struct tar_header header) {
}

FILE* createFile(struct tar_header header) {
  char filepath[255];
  memset(filepath, 0, 255);
  strcat(filepath, header.prefix);
  strcat(filepath, header.name);

  printf("extracting %s \n", filepath);
  
  // create the file, trying to create necessary directories
  FILE *fp = fopen(filepath, "w");
  if (fp == NULL) {
    if (errno == ENOENT) {
      // need to create directory
      if (mkdir(filepath, 0777 != 0)) {
        perror(filepath);
        return NULL;
      }
    }
    else {
      perror(filepath);
      return NULL;
    }
  }
  fp = fopen(filepath, "w");
  if (fp == NULL) {
    perror(filepath);
    return NULL;
  }
  
  // setting permissions
  int mode = octalStringToDecimal(header.mode);
  if (chmod(filepath, mode) != 0) {
    perror(filepath);
    return NULL;
  }
  
  // setting UID, GID
  
  
  return fp;
}

int octalStringToDecimal(char* octalString) {
  unsigned int octal = atoi(octalString);
  unsigned int decimal = 0;
  int power = 1;
  for(int i = 0; octal != 0; i++) {

    decimal += (octal%10) * power;
    octal/=10;
    power *= 8;
  }

  return decimal;
}
